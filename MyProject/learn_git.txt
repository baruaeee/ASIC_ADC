--turn a folder to one with git--
git init

--check git status--

--go to a new brance--
git checkout -b new_branch [-b for branch, create and switch to the new branch]

--add file to staging area--
git add file_name

--commit to git--
git commit -m "Initial commit" [-m for message, first commit >> Initial commit]

--change commit text--
git commit --amend

--see differences on file changes--
git diff

--see current brances--
git branch

--show remote branches--
git branch -r

--set main branch at remote repository--
git push --set-upstream origin main

--set current branch to create remote branch--
git config --global --add --bool push.autoSetupRemote true



--link a local repo with the remote repo--
git remote add origin <git repo link>

--create a branch--
git branch feat/branch_name [or git branch fix/branch_name]

--marge changes with other branch--
git merge branch_name

--see log--
git log --oneline [--oneline to see in oneline]
git log -n [the last 'n' log]

--delete a brance--
git branch -d branch_name [-d for delete]

--rebase branch with main before fix--
git rebase main

--leave some correction for later--
git stash [changes will be saved in stash]

--get stash list--
git stash list

--get compact stash info--
git stash show
git stash show -p [-p for patch for more details changes]

--continue rebase after resolving conflict--
git rebase continue

--drop stash--
git stash drop or git stash drop <stash_name>

--apply latest stash--
git stash apply

--bring back stashed item--
git stash pop

--reset to last commit--
git reset HEAD~1

--revert to last commit--
git revert HEAD

--show the details before last revart--
git show HEAD~1

--show the details ofspecific commit--
git show <checksum hash>

--keep track of empty folder--
create a <.gitkeep> file inside the empty folder

--interactive rebase--
git rebase --interactive HEAD~2 [HEAD~2 means chance to work on last 2 changes]

--interective rebase to root(all)--
git rebase --interactive --root

--delete remote branch--
git push origin --delete <branch_name>

--rename branch--
git branch -m new-branch-name

--create git repo from local folder--
(first install gh -- "choco install gh")
gh repo create repo_name --public --source=. --remote=upstream
gh repo create repo_name --private --source=. --remote=upstream

--authenticate/login (gh need to be installed)--
gh auth login
git config --global user.email "email-address"
git config --global user.name "username"