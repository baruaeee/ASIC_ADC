
// Generated by Cadence Genus(TM) Synthesis Solution 22.13-s093_1
// Generated on: Dec 11 2024 01:14:17 CET (Dec 11 2024 00:14:17 UTC)

// Verification Directory fv/adc 

module case_box(in_0, out_0);
  input [14:0] in_0;
  output [16:0] out_0;
  wire [14:0] in_0;
  wire [16:0] out_0;
  wire n_18, n_21, n_24, n_27, n_30, n_36, n_39, n_513;
  wire n_514, n_515, n_516, n_517, n_518;
  assign out_0[0] = 1'b0;
  assign out_0[16] = in_0[0];
  nor g1 (out_0[15], in_0[0], n_513);
  not g2 (n_513, in_0[1]);
  nor g3 (out_0[14], in_0[1], n_514);
  not g4 (n_514, in_0[2]);
  nor g5 (out_0[13], in_0[2], n_515);
  not g6 (n_515, in_0[3]);
  nor g7 (out_0[12], in_0[3], n_516);
  not g8 (n_516, in_0[4]);
  nor g9 (out_0[11], in_0[4], n_517);
  not g10 (n_517, in_0[5]);
  nor g11 (out_0[10], in_0[5], n_18);
  not g12 (n_18, in_0[6]);
  nor g13 (out_0[9], n_21, in_0[6]);
  not g14 (n_21, in_0[7]);
  nor g15 (out_0[8], n_24, in_0[7]);
  not g16 (n_24, in_0[8]);
  nor g17 (out_0[7], n_27, in_0[8]);
  not g18 (n_27, in_0[9]);
  nor g19 (out_0[6], n_30, in_0[9]);
  not g20 (n_30, in_0[10]);
  nor g21 (out_0[5], n_518, in_0[10]);
  not g22 (n_518, in_0[11]);
  nor g23 (out_0[4], n_36, in_0[11]);
  not g24 (n_36, in_0[12]);
  nor g25 (out_0[3], n_39, in_0[12]);
  not g26 (n_39, in_0[13]);
  nor g27 (out_0[2], out_0[1], in_0[13]);
  not g28 (out_0[1], in_0[14]);
endmodule

module mux(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
     in_9, in_10, in_11, in_12, in_13, in_14, in_15, z);
  input [15:0] ctl;
  input [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  output [3:0] z;
  wire [15:0] ctl;
  wire [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  wire [3:0] z;
  CDN_mux16 g1(.sel0 (ctl[15]), .data0 (in_0[3]), .sel1 (ctl[14]),
       .data1 (in_1[3]), .sel2 (ctl[13]), .data2 (in_2[3]), .sel3
       (ctl[12]), .data3 (in_3[3]), .sel4 (ctl[11]), .data4 (in_4[3]),
       .sel5 (ctl[10]), .data5 (in_5[3]), .sel6 (ctl[9]), .data6
       (in_6[3]), .sel7 (ctl[8]), .data7 (in_7[3]), .sel8 (ctl[7]),
       .data8 (in_8[3]), .sel9 (ctl[6]), .data9 (in_9[3]), .sel10
       (ctl[5]), .data10 (in_10[3]), .sel11 (ctl[4]), .data11
       (in_11[3]), .sel12 (ctl[3]), .data12 (in_12[3]), .sel13
       (ctl[2]), .data13 (in_13[3]), .sel14 (ctl[1]), .data14
       (in_14[3]), .sel15 (ctl[0]), .data15 (in_15[3]), .z (z[3]));
  CDN_mux16 g2(.sel0 (ctl[15]), .data0 (in_0[2]), .sel1 (ctl[14]),
       .data1 (in_1[2]), .sel2 (ctl[13]), .data2 (in_2[2]), .sel3
       (ctl[12]), .data3 (in_3[2]), .sel4 (ctl[11]), .data4 (in_4[2]),
       .sel5 (ctl[10]), .data5 (in_5[2]), .sel6 (ctl[9]), .data6
       (in_6[2]), .sel7 (ctl[8]), .data7 (in_7[2]), .sel8 (ctl[7]),
       .data8 (in_8[2]), .sel9 (ctl[6]), .data9 (in_9[2]), .sel10
       (ctl[5]), .data10 (in_10[2]), .sel11 (ctl[4]), .data11
       (in_11[2]), .sel12 (ctl[3]), .data12 (in_12[2]), .sel13
       (ctl[2]), .data13 (in_13[2]), .sel14 (ctl[1]), .data14
       (in_14[2]), .sel15 (ctl[0]), .data15 (in_15[2]), .z (z[2]));
  CDN_mux16 g3(.sel0 (ctl[15]), .data0 (in_0[1]), .sel1 (ctl[14]),
       .data1 (in_1[1]), .sel2 (ctl[13]), .data2 (in_2[1]), .sel3
       (ctl[12]), .data3 (in_3[1]), .sel4 (ctl[11]), .data4 (in_4[1]),
       .sel5 (ctl[10]), .data5 (in_5[1]), .sel6 (ctl[9]), .data6
       (in_6[1]), .sel7 (ctl[8]), .data7 (in_7[1]), .sel8 (ctl[7]),
       .data8 (in_8[1]), .sel9 (ctl[6]), .data9 (in_9[1]), .sel10
       (ctl[5]), .data10 (in_10[1]), .sel11 (ctl[4]), .data11
       (in_11[1]), .sel12 (ctl[3]), .data12 (in_12[1]), .sel13
       (ctl[2]), .data13 (in_13[1]), .sel14 (ctl[1]), .data14
       (in_14[1]), .sel15 (ctl[0]), .data15 (in_15[1]), .z (z[1]));
  CDN_mux16 g4(.sel0 (ctl[15]), .data0 (in_0[0]), .sel1 (ctl[14]),
       .data1 (in_1[0]), .sel2 (ctl[13]), .data2 (in_2[0]), .sel3
       (ctl[12]), .data3 (in_3[0]), .sel4 (ctl[11]), .data4 (in_4[0]),
       .sel5 (ctl[10]), .data5 (in_5[0]), .sel6 (ctl[9]), .data6
       (in_6[0]), .sel7 (ctl[8]), .data7 (in_7[0]), .sel8 (ctl[7]),
       .data8 (in_8[0]), .sel9 (ctl[6]), .data9 (in_9[0]), .sel10
       (ctl[5]), .data10 (in_10[0]), .sel11 (ctl[4]), .data11
       (in_11[0]), .sel12 (ctl[3]), .data12 (in_12[0]), .sel13
       (ctl[2]), .data13 (in_13[0]), .sel14 (ctl[1]), .data14
       (in_14[0]), .sel15 (ctl[0]), .data15 (in_15[0]), .z (z[0]));
endmodule

module therm(Y, b, clk, rst);
  input [14:0] Y;
  input clk, rst;
  output [3:0] b;
  wire [14:0] Y;
  wire clk, rst;
  wire [3:0] b;
  wire [3:0] out;
  wire UNCONNECTED, n_81, n_82, n_83, n_84, n_85, n_86, n_87;
  wire n_88, n_89, n_90, n_91, n_92, n_93, n_94, n_95;
  wire n_96;
  case_box ctl_Y_14_10(.in_0 (Y), .out_0 ({n_81, n_82, n_83, n_84,
       n_85, n_86, n_87, n_88, n_89, n_90, n_91, n_92, n_93, n_94,
       n_95, n_96, UNCONNECTED}));
  mux mux_out_14_10(.ctl ({n_81, n_82, n_83, n_84, n_85, n_86, n_87,
       n_88, n_89, n_90, n_91, n_92, n_93, n_94, n_95, n_96}), .in_0
       (4'b0), .in_1 (4'b1), .in_2 (4'b10), .in_3 (4'b11), .in_4
       (4'b100), .in_5 (4'b101), .in_6 (4'b110), .in_7 (4'b111), .in_8
       (4'b1000), .in_9 (4'b1001), .in_10 (4'b1010), .in_11 (4'b1011),
       .in_12 (4'b1100), .in_13 (4'b1101), .in_14 (4'b1110), .in_15
       (4'b1111), .z (out));
  CDN_flop \out_reg[0] (.clk (clk), .d (out[0]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b[0]));
  CDN_flop \out_reg[1] (.clk (clk), .d (out[1]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b[1]));
  CDN_flop \out_reg[2] (.clk (clk), .d (out[2]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b[2]));
  CDN_flop \out_reg[3] (.clk (clk), .d (out[3]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b[3]));
endmodule

module pre_therm(IN, Y01, Y02, Y03, Y04, Y05, Y06, Y07, Y08, Y09, Y10,
     Y11, Y12, Y13, Y14, Y15);
  input IN;
  output Y01, Y02, Y03, Y04, Y05, Y06, Y07, Y08, Y09, Y10, Y11, Y12,
       Y13, Y14, Y15;
  wire IN;
  wire Y01, Y02, Y03, Y04, Y05, Y06, Y07, Y08, Y09, Y10, Y11, Y12, Y13,
       Y14, Y15;
endmodule

module adc(IN, b, clk, rst);
  input IN, clk, rst;
  output [3:0] b;
  wire IN, clk, rst;
  wire [3:0] b;
  wire [14:0] int;
  therm therm1(.Y (int), .b (b), .clk (clk), .rst (rst));
  pre_therm pretherm(.IN (IN), .Y01 (int[0]), .Y02 (int[1]), .Y03
       (int[2]), .Y04 (int[3]), .Y05 (int[4]), .Y06 (int[5]), .Y07
       (int[6]), .Y08 (int[7]), .Y09 (int[8]), .Y10 (int[9]), .Y11
       (int[10]), .Y12 (int[11]), .Y13 (int[12]), .Y14 (int[13]), .Y15
       (int[14]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux16(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, sel11, data11, sel12, data12, sel13,
     data13, sel14, data14, sel15, data15, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10, sel11, data11, sel12, data12, sel13,
       data13, sel14, data14, sel15, data15;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10, sel11, data11, sel12, data12, sel13, data13,
       sel14, data14, sel15, data15;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or sel7 or
         sel8 or sel9 or sel10 or sel11 or sel12 or sel13 or sel14 or
         sel15 or data0 or data1 or data2 or data3 or data4 or data5 or
         data6 or data7 or data8 or data9 or data10 or data11 or data12
         or data13 or data14 or data15) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8,
           sel9, sel10, sel11, sel12, sel13, sel14, sel15})
       16'b1000000000000000: z = data0;
       16'b0100000000000000: z = data1;
       16'b0010000000000000: z = data2;
       16'b0001000000000000: z = data3;
       16'b0000100000000000: z = data4;
       16'b0000010000000000: z = data5;
       16'b0000001000000000: z = data6;
       16'b0000000100000000: z = data7;
       16'b0000000010000000: z = data8;
       16'b0000000001000000: z = data9;
       16'b0000000000100000: z = data10;
       16'b0000000000010000: z = data11;
       16'b0000000000001000: z = data12;
       16'b0000000000000100: z = data13;
       16'b0000000000000010: z = data14;
       16'b0000000000000001: z = data15;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux16(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, sel11, data11, sel12, data12, sel13,
     data13, sel14, data14, sel15, data15, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10, sel11, data11, sel12, data12, sel13,
       data13, sel14, data14, sel15, data15;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10, sel11, data11, sel12, data12, sel13, data13,
       sel14, data14, sel15, data15;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7;
  wire w_8, w_9, w_10, w_11, w_12, w_13, w_14, w_15;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  and a_7 (w_7, sel7, data7);
  and a_8 (w_8, sel8, data8);
  and a_9 (w_9, sel9, data9);
  and a_10 (w_10, sel10, data10);
  and a_11 (w_11, sel11, data11);
  and a_12 (w_12, sel12, data12);
  and a_13 (w_13, sel13, data13);
  and a_14 (w_14, sel14, data14);
  and a_15 (w_15, sel15, data15);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10,
       w_11, w_12, w_13, w_14, w_15);
endmodule
`endif // ONE_HOT_MUX
`endif
